const express = require('express')
const multer = require('multer')
const sharp = require('sharp')
const User = require('../models/user')
const auth = require('../middleware/auth')
const { sendWelcomeEmail, sendCancelationEmail } = require('../emails/account')
const router = new express.Router()

//Signup new user
router.post('/users', async(req, res) => {
    //generating a new user with requested parameters
    const user = new User(req.body)
    try{
        //saving the user
        await user.save()
        sendWelcomeEmail(user.email, user.name)
        //generating the authentication token
        const token = await user.generateAuthToken()
        res.status(201).send({ user, token })
    }catch(e){
        res.status(400).send(e)
    }
})

//Configuration for file/image upload
const upload = multer({
    limits: {
        fileSize: 1000000
    },
    fileFilter(req, file, callback){
        if(!file.originalname.match(/\.(jpg|jpeg|png)$/)){
            return callback(new Error('Please upload an Image file'))
        }

        callback(undefined, true)
    }
})

//Upload image
router.post('/users/me/avatar', auth, upload.single('avatar'), async(req, res) => {
    
    //resizing the uploaded image
    const buffer = await sharp(req.file.buffer).resize({ width: 250, height: 250 }).png().toBuffer()
    //saving the uploaded image as buffer data in users table
    req.user.avatar = buffer
    await req.user.save()
    res.status(200).send({ message: 'Upload Successful'})
}, (error, req, res, next) => {
    res.status(400).send({ error: error.message })
})

//Delete image
router.delete('/users/me/avatar', auth, async(req, res) => {
    req.user.avatar = undefined
    await req.user.save()
    res.status(200).send({ message: 'Profile image deleted successfully.' })
})

//View Image
router.get('/users/:id/avatar', async(req, res) => {
    try{
        const user = await User.findById(req.params.id)

        if(!user || !user.avatar){
            throw new Error()
        }
        res.set('Content-Type', 'image/jpg')
        res.send(user.avatar)
    }catch(e){
        res.status(404).send()
    }
})

//Login users
router.post('/users/login', async(req, res) => {
    try{
        //fetching the user with the credentials provided
        const user = await User.findByCredentials(req.body.email, req.body.password)
        //generating the authentication token
        const token = await user.generateAuthToken()
        //returning the user details back
        res.send({ user, token })
    }catch(e){
        res.status(400).send(e)
    }
})

//Logout user
router.post('/users/logout', auth, async(req, res) => {
    try{
        //deleting the particular token during logging out and leaving the other tokens as it is in the database
        req.user.tokens = req.user.tokens.filter((token) => {
            return token.token !== req.token
        })
        //saving the user
        await req.user.save()
        res.send({message: 'User successfully logged out'})
    }catch(e){
        res.status(500).send()
    }
})

//Logout from all accounts
router.post('/users/logoutAll', auth, async(req,res) => {
    try{
        //removing all the tokens generated by the user with the account
        req.user.tokens = []
        await req.user.save()
        res.send({message: 'All users successfully logged out'})
    }catch(e){
        res.status(500).send()
    }
})

//Logged in user details
router.get('/users/me', auth, async(req, res) => {
    res.send(req.user)
})

//Find any user by id
router.get('/users/:id', auth, async(req, res) => {
    //fetching the id from URL
    const _id = req.params.id

    try{
        //finding the user by that id
        const user = await User.findById(_id)
        if(!user){
            return res.send(404).send()
        }

        res.send(user)
    }catch(e){
        res.status(500).send(e)
    }
})

//Update the logged in user profile
router.patch('/users/me', auth, async(req, res) => {

    //getting the key values of the given json
    const updates = Object.keys(req.body)
    //creating only the updatable fields array
    const allowedUpdates = ['name', 'email', 'password', 'age']
    //checking if the keys provided in the request matches the updatable fields
    const isValidUpdate = updates.every((update) => allowedUpdates.includes(update))

    if(!isValidUpdate){
        return res.status(400).send({ error: 'Invalid Updates' })
    }

    // const _id = req.user._id
    try{
        // const user = await User.findById(_id)
        // const user = await User.findByIdAndUpdate(_id, req.body, { new:true, runValidators:true })

        // if(!user){
        //     return res.status(404).send()
        // }
        
        //update the user profile with required changes
        updates.forEach(update => req.user[update] = req.body[update])
        await req.user.save()
        res.send(req.user)
    }catch(e){
        res.status(400).send(e)
    }
})

//Delete the user
router.delete('/users/me', auth, async(req,res) => {
    // const _id = req.user._id

    try{
        // const user = await User.findByIdAndDelete(_id)

        // if(!user){
        //     return res.status(404).send()
        // }

        //removing the authenticated user from database
        await req.user.remove()
        sendCancelationEmail(req.user.email, req.user.name)
        res.send(req.user)
    }catch(e){
        res.status(500).send(e)
    }
})

module.exports = router